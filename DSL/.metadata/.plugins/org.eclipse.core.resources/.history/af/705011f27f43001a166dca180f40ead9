package fsm.aspects

import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import fsm.FSM
import fsm.State
import fsm.Transition
import fsm.InitialState
import fsm.FinalState

import static extension fsm.aspects.FSMAspect.*
import static extension fsm.aspects.StateAspect.*
import static extension fsm.aspects.TransitionAspect.*
import static extension fsm.aspects.InitialStateAspect.*
import static extension fsm.aspects.FinalStateAspect.*
import fsm.FSM
import fsm.FsmPackage
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI

class Interpreter{
	def static void main(String[] args){
		FsmPackage.eINSTANCE.class
		Resource$Factory.Registry.INSTANCE.extensionToFactoryMap.put("xmi", new XMIResourceFactoryImpl);
		var Resource resource = new ResourceSetImpl().getResource(URI.createURI('C:/Users/Etu/Documents/Master1/coursDSL/DSL/fsm/model/FSM.xmi'), true);
		var myFSM = resource.contents.get(0) as FSM
		myFSM.execute
	}
}

@Aspect(className=FSM)
class FSMAspect {
	def void execute(){
		State init;
		_self.state.forEach[s | 
			if (s instanceof InitialState){
				init = s;
			}
		]
	}

}

@Aspect(className=State)
class StateAspect {

}

@Aspect(className=Transition)
class TransitionAspect {

}

@Aspect(className=InitialState)
class InitialStateAspect extends StateAspect {

}

@Aspect(className=FinalState)
class FinalStateAspect extends StateAspect {

}



