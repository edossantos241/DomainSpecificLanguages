/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fsm.FSM
import fsm.InitialState
import fsm.FinalState

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var myfsm = resource.contents.get(0) as FSM
		fsa.generateFile('FSM.java', '''abstract class FSM{}''')
		
		fsa.generateFile('State.java', '''abstract class State{}''')
		fsa.generateFile('InitialState.java', '''abstract class InitialState extends State{}''')
		fsa.generateFile('FinalState.java', '''abstract class FinalState extends State{}''')
		fsa.generateFile('Transition.java', '''abstract class Transition{}''')
		myfsm.state.forEach[s | 
			if (s instanceof InitialState){
				fsa.generateFile(s.name + '.java', '''class ''' + s.name + ''' extends InitialState{}''')
				} else if (s instanceof FinalState){
					fsa.generateFile(s.name + '.java', '''class ''' + s.name + ''' extends FinalState{}''')
				} else {
					fsa.generateFile(s.name + '.java', '''class ''' + s.name + ''' extends State{}'''
					)
				}
				
		]
		myfsm.transition.forEach[t | 
			fsa.generateFile(t.name + '.java', '''class ''' + t.name + ''' extends Transition{}''')]
		fsa.generateFile(myfsm.name + '.java', '''class ''' + myfsm.name + ''' extends FSM{
			public static void main(String args[]){
				State initial = new sI();
				State final = new sF();
				State current =  initial;
				Systeme.out.print("Début");
				While (current != final){
					Switch current.getClass();
						case sI():
							Systeme.out.print("Transition de l'état initial à l'état ouvert");
							current = new sOpen();
							break;
						case sOpen():
							Systeme.out.print("Transition de l'état ouvert à l'état fermé");
							current = new sFerme();
							break;
						case sF():
							Systeme.out.print("Transition de l'état fermé à l'état final");
							current = final;
							break;
				}
			}
			Systeme.out.print("Etat final atteind");
		}''')
		
	}
}
